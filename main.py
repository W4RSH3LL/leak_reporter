import os
from dotenv import load_dotenv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from leak_lookup import LeakLookup
import datetime

# ---------- Load environment variables ----------
load_dotenv()
smtp_server = "127.0.0.1"
smtp_port = int(os.getenv("PORT", 1025))
username = os.getenv("USER")
password = os.getenv("PASS")
sender_email = os.getenv("SENDER_EMAIL")
receiver_email = os.getenv("RECEIVER_EMAIL")

# ----------------------------------------

# ---------- Functions ----------
def get_emails():
    with open('emails.txt') as file:
        data = file.readlines()
    return [email.strip() for email in data]

def research(emails):
    lookup = LeakLookup(emails)
    results = lookup.send_request()
    return results

def build_html_payload(results):
    API_name = 'Leak Lookup'
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    html = f"""
    <html>
    <head>
    <style>
        body {{
            font-family: Arial, sans-serif;
            background-color: #f4f6f8;
            color: #333;
        }}
        .container {{
            max-width: 700px;
            margin: 20px auto;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }}
        .header {{
            background: linear-gradient(90deg, #4b79a1, #283e51);
            color: white;
            padding: 15px;
            border-radius: 10px 10px 0 0;
            text-align: center;
        }}
        .header img {{
            max-height: 60px;
            margin-bottom: 10px;
        }}
        h2 {{
            margin: 0;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            border-radius: 10px;
            overflow: hidden;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #4b79a1;
            color: white;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        tr:hover {{
            background-color: #e0f0ff;
        }}
        .safe {{ color: green; font-weight: bold; }}
        .leaked {{ color: red; font-weight: bold; }}
        .unknown {{ color: orange; font-weight: bold; }}
        .footer {{
            text-align: center;
            margin-top: 20px;
            font-size: 0.85em;
            color: #666;
        }}
    </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h2>Leak Check Report</h2>
            </div>
            <p><strong>API used:</strong> {API_name}</p>
            <p><strong>Date:</strong> {current_time}</p>
            <table>
                <tr>
                    <th>Email</th>
                    <th>Result</th>
                </tr>
    """

    # Add color-coded results
    for r in results:
        for email, result in r.items():
            if result.lower() in ['no leaks', 'safe', 'clean']:
                css_class = 'safe'
            elif result.lower() in ['leaked', 'found', 'compromised']:
                css_class = 'leaked'
            else:
                css_class = 'unknown'
            html += f"""
                <tr>
                    <td>{email}</td>
                    <td class="{css_class}">{result}</td>
                </tr>
            """

    html += f"""
            </table>
            <div class="footer">
                Report generated by Leak Checker on {current_time}
            </div>
        </div>
    </body>
    </html>
    """
    return html

def send_email(html_payload):
    message = MIMEMultipart("alternative")
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = f"Leak Check Results"

    message.attach(MIMEText(html_payload, "html"))

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as smtp:
            smtp.starttls()
            smtp.login(username, password)
            smtp.sendmail(sender_email, receiver_email, message.as_string())
        print("✅ Email sent successfully!")
    except Exception as e:
        print(f"❌ Failed to send email: {e}")
# ----------------------------------------

# ---------- Main ----------
emails = get_emails()
results = research(emails)
html_payload = build_html_payload(results)
send_email(html_payload)
# ----------------------------------------
